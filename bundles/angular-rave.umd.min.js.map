{"version":3,"sources":["ng://angular-rave/lib/angular-rave.component.ts","ng://angular-rave/lib/angular-rave.directive.ts","ng://angular-rave/lib/rave-options.ts","ng://angular-rave/lib/angular-rave.module.ts"],"names":["AngularRaveComponent","EventEmitter","prototype","pay","this","init","emit","loadScript","_a","sent","window","getpaidSetup","console","error","raveOptions","Object","keys","length","validateOptions","paymentSetup","validateInput","insertRaveOptions","_raveOptions","_this","amount","payment_plan","PBFPubKey","payment_method","redirect_url","integrity_hash","pay_button_text","country","currency","custom_description","customer_email","custom_logo","custom_title","customer_firstname","customer_lastname","txref","customer_phone","onclose","close","callback","res","Promise","resolve","script","document","createElement","head","appendChild","onLoadFunc","removeEventListener","addEventListener","setAttribute","observers","ngOnInit","Component","args","selector","template","Input","Output","AngularRaveDirective","buttonClick","Directive","HostListener","RaveOptions","AngularRaveModule","_super","tslib_1.__extends","NgModule","imports","exports","declarations","providers"],"mappings":"0TAyCE,SAAAA,iBANwC,IAAIC,EAAAA,2BACD,IAAIA,EAAAA,uBACR,IAAIA,EAAAA,+BACS,UAK9CD,EAAAE,UAAAC,IAAN,yHAIE,OAHIC,KAAKC,MACPD,KAAKC,KAAKC,OAEZ,CAAA,EAAMF,KAAKG,qBACX,OADAC,EAAAC,OACmC,mBAAxBC,OAAOC,aAChB,CAAA,EAAOC,QAAQC,MAAM,sFAGnBT,KAAKU,aAAsD,EAAvCC,OAAOC,KAAKZ,KAAKU,aAAaG,OAChDb,KAAKc,oBACPd,KAAKe,aAAeT,OAAOC,aAAaP,KAAKU,cAG3CV,KAAKgB,kBACPhB,KAAKiB,oBACLjB,KAAKe,aAAeT,OAAOC,aAAaP,KAAKkB,0BAKnDtB,EAAAE,UAAAmB,kBAAA,WAAA,IAAAE,EAAAnB,KACEA,KAAKoB,SAASpB,KAAKkB,aAAaE,OAASpB,KAAKoB,QAC9CpB,KAAKqB,eAAerB,KAAKkB,aAAaG,aAAerB,KAAKqB,cAC1DrB,KAAKsB,YAAYtB,KAAKkB,aAAaI,UAAYtB,KAAKsB,WACpDtB,KAAKuB,iBAAiBvB,KAAKkB,aAAaK,eAAiBvB,KAAKuB,gBAC9DvB,KAAKwB,eAAexB,KAAKkB,aAAaM,aAAexB,KAAKwB,cAC1DxB,KAAKyB,iBAAiBzB,KAAKkB,aAAaO,eAAiBzB,KAAKyB,gBAC9DzB,KAAK0B,kBAAkB1B,KAAKkB,aAAaQ,gBAAkB1B,KAAK0B,iBAChE1B,KAAK2B,UAAU3B,KAAKkB,aAAaS,QAAU3B,KAAK2B,SAChD3B,KAAK4B,WAAW5B,KAAKkB,aAAaU,SAAW5B,KAAK4B,UAClD5B,KAAK6B,qBAAqB7B,KAAKkB,aAAaW,mBAAqB7B,KAAK6B,oBACtE7B,KAAK8B,iBAAiB9B,KAAKkB,aAAaY,eAAiB9B,KAAK8B,gBAC9D9B,KAAK+B,cAAc/B,KAAKkB,aAAaa,YAAc/B,KAAK+B,aACxD/B,KAAKgC,eAAehC,KAAKkB,aAAac,aAAehC,KAAKgC,cAC1DhC,KAAKiC,qBAAqBjC,KAAKkB,aAAae,mBAAqBjC,KAAKiC,oBACtEjC,KAAKkC,oBAAoBlC,KAAKkB,aAAagB,kBAAoBlC,KAAKkC,mBACpElC,KAAKmC,QAAQnC,KAAKkB,aAAaiB,MAAQnC,KAAKmC,OAC5CnC,KAAKoC,iBAAiBpC,KAAKkB,aAAakB,eAAiBpC,KAAKoC,gBAC9DpC,KAAKqC,UAAUrC,KAAKkB,aAAamB,QAAU,WAAOlB,EAAKkB,QAAQnC,OAAQiB,EAAKJ,aAAauB,UACzFtC,KAAKuC,WAAWvC,KAAKkB,aAAaqB,SAAW,SAACC,GAAQ,OAAArB,EAAKkB,QAAQnC,KAAKsC,MAG1E5C,EAAAE,UAAAK,WAAA,WACE,OAAO,IAAIsC,QAAQ,SAAAC,GACjB,GAAmC,mBAAxBpC,OAAOC,aAAlB,CAIA,IAAMoC,EAASrC,OAAOsC,SAASC,cAAc,UAC7CvC,OAAOsC,SAASE,KAAKC,YAAYJ,GACjC,IAAMK,EAAa,WACjBL,EAAOM,oBAAoB,OAAQD,GACnCN,KAEFC,EAAOO,iBAAiB,OAAQF,GAChCL,EAAOQ,aAAa,MAAO,uFAVzBT,OAcN9C,EAAAE,UAAAgB,gBAAA,WAAA,IAAAK,EAAAnB,KACE,OAAKA,KAAKU,YAAYY,UAChBtB,KAAKU,YAAYoB,gBAAkB9B,KAAKU,YAAY0B,eAGrDpC,KAAKU,YAAYyB,MACjBnC,KAAKU,YAAYU,OACjBpB,KAAKuC,SAASa,UAAUvC,QACzBb,KAAKqC,QAAQe,UAAUvC,SAAQb,KAAKU,YAAY2B,QAAU,WAAM,OAAAlB,EAAKkB,QAAQnC,SACjFF,KAAKU,YAAY6B,SAAW,SAAAC,GAC1BrB,EAAKoB,SAASrC,KAAKsC,GACnBrB,EAAKJ,aAAauB,UAEb,GANuC9B,QAAQC,MAAM,0EADrBD,QAAQC,MAAM,8CADfD,QAAQC,MAAM,4DAF3CD,QAAQC,MAAM,4DAFmBD,QAAQC,MAAM,kDAe1Db,EAAAE,UAAAkB,cAAA,WACE,OAAKhB,KAAKsB,UACJtB,KAAK8B,gBAAkB9B,KAAKoC,eAC7BpC,KAAKmC,MACLnC,KAAKoB,SACLpB,KAAKuC,UAAmB/B,QAAQC,MAAM,0EADhBD,QAAQC,MAAM,8CADfD,QAAQC,MAAM,4DADoBD,QAAQC,MAAM,4DAD5CD,QAAQC,MAAM,kDAQ9Cb,EAAAE,UAAAuD,SAAA,WACErD,KAAKD,2BAxHRuD,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,eACVC,SAAU,yGAITC,EAAAA,8BACAA,EAAAA,qBACAA,EAAAA,8BACAA,EAAAA,sBACAA,EAAAA,wBACAA,EAAAA,uBACAA,EAAAA,4BACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,kCACAA,EAAAA,iCACAA,EAAAA,0BACAA,EAAAA,+BACAA,EAAAA,4BACAA,EAAAA,kCACAA,EAAAA,4BACAA,EAAAA,2BACAA,EAAAA,oBACAA,EAAAA,2BACAA,EAAAA,uBACAC,EAAAA,yBACAA,EAAAA,qBACAA,EAAAA,4BCGD,SAAAC,qBAPoD,gBACZ,IAAI/D,EAAAA,2BACJ,IAAIA,EAAAA,uBACL,IAAIA,EAAAA,+BACS,UAMpD+D,EAAA9D,UAAA+D,uBACE7D,KAAKD,OAGD6D,EAAA9D,UAAAC,IAAN,yHAIE,OAHIC,KAAKC,MACPD,KAAKC,KAAKC,OAEZ,CAAA,EAAMF,KAAKG,qBACX,OADAC,EAAAC,OACmC,mBAAxBC,OAAOC,aAChB,CAAA,EAAOC,QAAQC,MAAM,sFAGnBT,KAAKU,aAAsD,EAAvCC,OAAOC,KAAKZ,KAAKU,aAAaG,OAChDb,KAAKc,oBACPd,KAAKe,aAAeT,OAAOC,aAAaP,KAAKU,cAG3CV,KAAKgB,kBACPhB,KAAKiB,oBACLjB,KAAKe,aAAeT,OAAOC,aAAaP,KAAKkB,0BAKnD0C,EAAA9D,UAAAmB,kBAAA,WAAA,IAAAE,EAAAnB,KACEA,KAAKoB,SAASpB,KAAKkB,aAAaE,OAASpB,KAAKoB,QAC9CpB,KAAKqB,eAAerB,KAAKkB,aAAaG,aAAerB,KAAKqB,cAC1DrB,KAAKsB,YAAYtB,KAAKkB,aAAaI,UAAYtB,KAAKsB,WACpDtB,KAAKuB,iBAAiBvB,KAAKkB,aAAaK,eAAiBvB,KAAKuB,gBAC9DvB,KAAKwB,eAAexB,KAAKkB,aAAaM,aAAexB,KAAKwB,cAC1DxB,KAAKyB,iBAAiBzB,KAAKkB,aAAaO,eAAiBzB,KAAKyB,gBAC9DzB,KAAK0B,kBAAkB1B,KAAKkB,aAAaQ,gBAAkB1B,KAAK0B,iBAChE1B,KAAK2B,UAAU3B,KAAKkB,aAAaS,QAAU3B,KAAK2B,SAChD3B,KAAK4B,WAAW5B,KAAKkB,aAAaU,SAAW5B,KAAK4B,UAClD5B,KAAK6B,qBAAqB7B,KAAKkB,aAAaW,mBAAqB7B,KAAK6B,oBACtE7B,KAAK8B,iBAAiB9B,KAAKkB,aAAaY,eAAiB9B,KAAK8B,gBAC9D9B,KAAK+B,cAAc/B,KAAKkB,aAAaa,YAAc/B,KAAK+B,aACxD/B,KAAKgC,eAAehC,KAAKkB,aAAac,aAAehC,KAAKgC,cAC1DhC,KAAKiC,qBAAqBjC,KAAKkB,aAAae,mBAAqBjC,KAAKiC,oBACtEjC,KAAKkC,oBAAoBlC,KAAKkB,aAAagB,kBAAoBlC,KAAKkC,mBACpElC,KAAKoC,iBAAiBpC,KAAKkB,aAAakB,eAAiBpC,KAAKoC,gBAC9DpC,KAAKmC,QAAQnC,KAAKkB,aAAaiB,MAAQnC,KAAKmC,OAC5CnC,KAAKqC,UAAUrC,KAAKkB,aAAamB,QAAU,WACzClB,EAAKkB,QAAQnC,SAEfF,KAAKuC,WAAWvC,KAAKkB,aAAaqB,SAAW,SAAAC,GAC3CrB,EAAKoB,SAASrC,KAAKsC,GACnBrB,EAAKJ,aAAauB,WAItBsB,EAAA9D,UAAAgB,gBAAA,WAAA,IAAAK,EAAAnB,KACE,OAAKA,KAAKU,YAAYY,UAChBtB,KAAKU,YAAYoB,gBAAkB9B,KAAKU,YAAY0B,eAGrDpC,KAAKU,YAAYyB,MACjBnC,KAAKU,YAAYU,OACjBpB,KAAKuC,SAASa,UAAUvC,QACzBb,KAAKqC,QAAQe,UAAUvC,SAAUb,KAAKU,YAAY2B,QAAU,WAAM,OAAAlB,EAAKkB,QAAQnC,SACnFF,KAAKU,YAAY6B,SAAW,SAAAC,GAC1BrB,EAAKoB,SAASrC,KAAKsC,GACnBrB,EAAKJ,aAAauB,UAEb,GANuC9B,QAAQC,MAAM,0EADrBD,QAAQC,MAAM,8CADfD,QAAQC,MAAM,4DAF3CD,QAAQC,MAAM,4DAFmBD,QAAQC,MAAM,kDAe1DmD,EAAA9D,UAAAK,WAAA,WACE,OAAO,IAAIsC,QAAQ,SAAAC,GACjB,GAAmC,mBAAxBpC,OAAOC,aAAlB,CAIA,IAAMoC,EAASrC,OAAOsC,SAASC,cAAc,UAC7CvC,OAAOsC,SAASE,KAAKC,YAAYJ,GACjC,IAAMK,EAAa,WACjBL,EAAOM,oBAAoB,OAAQD,GACnCN,KAEFC,EAAOO,iBAAiB,OAAQF,GAChCL,EAAOQ,aAAa,MAAO,uFAVzBT,OAcNkB,EAAA9D,UAAAkB,cAAA,WACE,OAAKhB,KAAKsB,UACJtB,KAAK8B,gBAAkB9B,KAAKoC,eAC7BpC,KAAKmC,MACLnC,KAAKoB,SACLpB,KAAKuC,UAAmB/B,QAAQC,MAAM,0EADhBD,QAAQC,MAAM,8CADfD,QAAQC,MAAM,4DADoBD,QAAQC,MAAM,4DAD5CD,QAAQC,MAAM,sEAvH/CqD,EAAAA,UAASP,KAAA,CAAC,CACTC,SAAU,8FAGTE,EAAAA,8BACAA,EAAAA,qBACAA,EAAAA,8BACAA,EAAAA,sBACAA,EAAAA,wBACAA,EAAAA,uBACAA,EAAAA,4BACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,kCACAA,EAAAA,iCACAA,EAAAA,+BACAA,EAAAA,4BACAA,EAAAA,0BACAA,EAAAA,kCACAA,EAAAA,4BACAA,EAAAA,2BACAA,EAAAA,oBACAA,EAAAA,2BACAA,EAAAA,uBACAC,EAAAA,yBACAA,EAAAA,qBACAA,EAAAA,4BAMAI,EAAAA,aAAYR,KAAA,CAAC,iBC1ChBS,eCAAC,GDmFA,SAAAC,+DAAwCC,EAAAA,UAAAA,EAAAA,GAAxC,CAAwCH,GCnFxC,oDAKCI,EAAAA,SAAQb,KAAA,CAAC,CACRc,QAAS,GACTC,QAAS,CAAC1E,EAAsBgE,GAChCW,aAAc,CAAC3E,EAAsBgE,GACrCY,UAAW,SATb","sourcesContent":["import { Component, OnInit, EventEmitter, Input, Output } from '@angular/core';\r\nimport { PrivateRaveOptions } from './rave-options';\r\n\r\ninterface MyWindow extends Window {\r\n  getpaidSetup: (raveOptions: Partial<PrivateRaveOptions>) => void;\r\n}\r\n\r\ndeclare var window: MyWindow;\r\n\r\n@Component({\r\n  selector: 'angular-rave', // tslint:disable-line\r\n  template: `<ng-content></ng-content>`\r\n})\r\n\r\nexport class AngularRaveComponent implements OnInit {\r\n  @Input() PBFPubKey: string;\r\n  @Input() integrity_hash: string;\r\n  @Input() txref: string;\r\n  @Input() payment_method: string;\r\n  @Input() amount: number;\r\n  @Input() currency: string;\r\n  @Input() country: string;\r\n  @Input() payment_plan: number;\r\n  @Input() customer_email: string;\r\n  @Input() customer_phone: string;\r\n  @Input() customer_firstname: string;\r\n  @Input() customer_lastname: string;\r\n  @Input() subaccount: { id: string, transaction_split_ratio: string }[];\r\n  @Input() pay_button_text: string;\r\n  @Input() custom_title: string;\r\n  @Input() custom_description: string;\r\n  @Input() redirect_url: string;\r\n  @Input() custom_logo: string;\r\n  @Input() meta: any;\r\n  @Input() raveOptions: Partial<PrivateRaveOptions>;\r\n  @Output() onclose: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() callback: EventEmitter<Object> = new EventEmitter<Object>();\r\n  @Output() init: EventEmitter<Object> = new EventEmitter<Object>();\r\n  private _raveOptions: Partial<PrivateRaveOptions> = {};\r\n  private paymentSetup: any;\r\n\r\n  constructor() { }\r\n\r\n  async pay() {\r\n    if (this.init) {\r\n      this.init.emit();\r\n    }\r\n    await this.loadScript();\r\n    if (typeof window.getpaidSetup !== 'function') {\r\n      return console.error('ANGULAR-RAVE: Please verify that you imported rave\\'s script into your index.html');\r\n    }\r\n    // If the raveoptions Input is present then use it\r\n    if (this.raveOptions && Object.keys(this.raveOptions).length > 3) {\r\n      if (this.validateOptions()) {\r\n        this.paymentSetup = window.getpaidSetup(this.raveOptions);\r\n      }\r\n    } else {\r\n      if (this.validateInput()) {\r\n        this.insertRaveOptions();\r\n        this.paymentSetup = window.getpaidSetup(this._raveOptions);\r\n      }\r\n    }\r\n  }\r\n\r\n  insertRaveOptions() {\r\n    this.amount ? this._raveOptions.amount = this.amount : null\r\n    this.payment_plan ? this._raveOptions.payment_plan = this.payment_plan : null\r\n    this.PBFPubKey ? this._raveOptions.PBFPubKey = this.PBFPubKey : null\r\n    this.payment_method ? this._raveOptions.payment_method = this.payment_method : null\r\n    this.redirect_url ? this._raveOptions.redirect_url = this.redirect_url : null\r\n    this.integrity_hash ? this._raveOptions.integrity_hash = this.integrity_hash : null\r\n    this.pay_button_text ? this._raveOptions.pay_button_text = this.pay_button_text : null\r\n    this.country ? this._raveOptions.country = this.country : null\r\n    this.currency ? this._raveOptions.currency = this.currency : null\r\n    this.custom_description ? this._raveOptions.custom_description = this.custom_description : null\r\n    this.customer_email ? this._raveOptions.customer_email = this.customer_email : null\r\n    this.custom_logo ? this._raveOptions.custom_logo = this.custom_logo : null\r\n    this.custom_title ? this._raveOptions.custom_title = this.custom_title : null\r\n    this.customer_firstname ? this._raveOptions.customer_firstname = this.customer_firstname : null\r\n    this.customer_lastname ? this._raveOptions.customer_lastname = this.customer_lastname : null\r\n    this.txref ? this._raveOptions.txref = this.txref : null\r\n    this.customer_phone ? this._raveOptions.customer_phone = this.customer_phone : null\r\n    this.onclose ? this._raveOptions.onclose = () => {this.onclose.emit(); this.paymentSetup.close()} : null\r\n    this.callback ? this._raveOptions.callback = (res) => this.onclose.emit(res) : null\r\n  }\r\n\r\n  loadScript(): Promise<void> {\r\n    return new Promise(resolve => {\r\n      if (typeof window.getpaidSetup === 'function') {\r\n        resolve();\r\n        return;\r\n      }\r\n      const script = window.document.createElement('script');\r\n      window.document.head.appendChild(script);\r\n      const onLoadFunc = () => {\r\n        script.removeEventListener('load', onLoadFunc);\r\n        resolve();\r\n      };\r\n      script.addEventListener('load', onLoadFunc);\r\n      script.setAttribute('src', 'https://ravesandboxapi.flutterwave.com/flwv3-pug/getpaidx/api/flwpbf-inline.js');\r\n    });\r\n  }\r\n\r\n  validateOptions() {\r\n    if (!this.raveOptions.PBFPubKey) { return console.error('ANGULAR-RAVE: Merchant public key is required'); }\r\n    if (!(this.raveOptions.customer_email || this.raveOptions.customer_phone)) {\r\n      return console.error('ANGULAR-RAVE: Customer email or phone number is required');\r\n    }\r\n    if (!this.raveOptions.txref) { return console.error('ANGULAR-RAVE: A unique transaction reference is required'); }\r\n    if (!this.raveOptions.amount) { return console.error('ANGULAR-RAVE: Amount to charge is required'); }\r\n    if (!this.callback.observers.length) { return console.error('ANGULAR-RAVE: You should attach to callback to verify your transaction'); }\r\n    if (this.onclose.observers.length) this.raveOptions.onclose = () => this.onclose.emit();\r\n    this.raveOptions.callback = res => {\r\n      this.callback.emit(res);\r\n      this.paymentSetup.close();\r\n    };\r\n    return true;\r\n  }\r\n\r\n  validateInput() {\r\n    if (!this.PBFPubKey) { return console.error('ANGULAR-RAVE: Merchant public key is required'); }\r\n    if (!(this.customer_email || this.customer_phone)) { return console.error('ANGULAR-RAVE: Customer email or phone number is required'); }\r\n    if (!this.txref) { return console.error('ANGULAR-RAVE: A unique transaction reference is required'); }\r\n    if (!this.amount) { return console.error('ANGULAR-RAVE: Amount to charge is required'); }\r\n    if (!this.callback) { return console.error('ANGULAR-RAVE: You should attach to callback to verify your transaction'); }\r\n    return true;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.pay();\r\n  }\r\n}\r\n","import { Directive, Input, Output, HostListener, EventEmitter } from '@angular/core';\r\n\r\nimport { PrivateRaveOptions } from './rave-options';\r\n\r\ninterface MyWindow extends Window {\r\n  getpaidSetup: (raveOptions: Partial<PrivateRaveOptions>) => void;\r\n}\r\n\r\ndeclare var window: MyWindow;\r\n\r\n@Directive({\r\n  selector: '[angular-rave]' // tslint:disable-line\r\n})\r\nexport class AngularRaveDirective {\r\n  @Input() PBFPubKey: string;\r\n  @Input() integrity_hash: string;\r\n  @Input() txref: string;\r\n  @Input() payment_method: string;\r\n  @Input() amount: number;\r\n  @Input() currency: string;\r\n  @Input() country: string;\r\n  @Input() payment_plan: number;\r\n  @Input() customer_email: string;\r\n  @Input() customer_phone: string;\r\n  @Input() customer_firstname: string;\r\n  @Input() customer_lastname: string;\r\n  @Input() pay_button_text: string;\r\n  @Input() custom_title: string;\r\n  @Input() subaccount: { id: string, transaction_split_ratio: string }[];\r\n  @Input() custom_description: string;\r\n  @Input() redirect_url: string;\r\n  @Input() custom_logo: string;\r\n  @Input() meta: any;\r\n  @Input() raveOptions: Partial<PrivateRaveOptions> = {};\r\n  @Output() onclose: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() callback: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() init: EventEmitter<Object> = new EventEmitter<Object>();\r\n  private _raveOptions: Partial<PrivateRaveOptions> = {};\r\n  private paymentSetup;\r\n\r\n  constructor() { }\r\n\r\n  @HostListener('click')\r\n  buttonClick() {\r\n    this.pay();\r\n  }\r\n\r\n  async pay() {\r\n    if (this.init) {\r\n      this.init.emit();\r\n    }\r\n    await this.loadScript();\r\n    if (typeof window.getpaidSetup !== 'function') {\r\n      return console.error('ANGULAR-RAVE: Please verify that you imported rave\\'s script into your index.html');\r\n    }\r\n    // If the raveoptions Input is present then use\r\n    if (this.raveOptions && Object.keys(this.raveOptions).length > 3) {\r\n      if (this.validateOptions()) {\r\n        this.paymentSetup = window.getpaidSetup(this.raveOptions);\r\n      }\r\n    } else {\r\n      if (this.validateInput()) {\r\n        this.insertRaveOptions();\r\n        this.paymentSetup = window.getpaidSetup(this._raveOptions);\r\n      }\r\n    }\r\n  }\r\n\r\n  insertRaveOptions() {\r\n    this.amount ? this._raveOptions.amount = this.amount : null\r\n    this.payment_plan ? this._raveOptions.payment_plan = this.payment_plan : null\r\n    this.PBFPubKey ? this._raveOptions.PBFPubKey = this.PBFPubKey : null\r\n    this.payment_method ? this._raveOptions.payment_method = this.payment_method : null\r\n    this.redirect_url ? this._raveOptions.redirect_url = this.redirect_url : null\r\n    this.integrity_hash ? this._raveOptions.integrity_hash = this.integrity_hash : null\r\n    this.pay_button_text ? this._raveOptions.pay_button_text = this.pay_button_text : null\r\n    this.country ? this._raveOptions.country = this.country : null\r\n    this.currency ? this._raveOptions.currency = this.currency : null\r\n    this.custom_description ? this._raveOptions.custom_description = this.custom_description : null\r\n    this.customer_email ? this._raveOptions.customer_email = this.customer_email : null\r\n    this.custom_logo ? this._raveOptions.custom_logo = this.custom_logo : null\r\n    this.custom_title ? this._raveOptions.custom_title = this.custom_title : null\r\n    this.customer_firstname ? this._raveOptions.customer_firstname = this.customer_firstname : null\r\n    this.customer_lastname ? this._raveOptions.customer_lastname = this.customer_lastname : null\r\n    this.customer_phone ? this._raveOptions.customer_phone = this.customer_phone : null\r\n    this.txref ? this._raveOptions.txref = this.txref : null\r\n    this.onclose ? this._raveOptions.onclose = () => {\r\n      this.onclose.emit()\r\n    } : null\r\n    this.callback ? this._raveOptions.callback = res => {\r\n      this.callback.emit(res);\r\n      this.paymentSetup.close();\r\n    } : null\r\n  }\r\n\r\n  validateOptions() {\r\n    if (!this.raveOptions.PBFPubKey) { return console.error('ANGULAR-RAVE: Merchant public key is required'); }\r\n    if (!(this.raveOptions.customer_email || this.raveOptions.customer_phone)) {\r\n      return console.error('ANGULAR-RAVE: Customer email or phone number is required');\r\n    }\r\n    if (!this.raveOptions.txref) { return console.error('ANGULAR-RAVE: A unique transaction reference is required'); }\r\n    if (!this.raveOptions.amount) { return console.error('ANGULAR-RAVE: Amount to charge is required'); }\r\n    if (!this.callback.observers.length) { return console.error('ANGULAR-RAVE: You should attach to callback to verify your transaction'); }\r\n    if (this.onclose.observers.length) { this.raveOptions.onclose = () => this.onclose.emit(); }\r\n    this.raveOptions.callback = res => {\r\n      this.callback.emit(res);\r\n      this.paymentSetup.close();\r\n    };\r\n    return true;\r\n  }\r\n\r\n  loadScript(): Promise<void> {\r\n    return new Promise(resolve => {\r\n      if (typeof window.getpaidSetup === 'function') {\r\n        resolve();\r\n        return;\r\n      }\r\n      const script = window.document.createElement('script');\r\n      window.document.head.appendChild(script);\r\n      const onLoadFunc = () => {\r\n        script.removeEventListener('load', onLoadFunc);\r\n        resolve();\r\n      };\r\n      script.addEventListener('load', onLoadFunc);\r\n      script.setAttribute('src', 'https://ravesandboxapi.flutterwave.com/flwv3-pug/getpaidx/api/flwpbf-inline.js');\r\n    });\r\n  }\r\n\r\n  validateInput() {\r\n    if (!this.PBFPubKey) { return console.error('ANGULAR-RAVE: Merchant public key is required'); }\r\n    if (!(this.customer_email || this.customer_phone)) { return console.error('ANGULAR-RAVE: Customer email or phone number is required'); }\r\n    if (!this.txref) { return console.error('ANGULAR-RAVE: A unique transaction reference is required'); }\r\n    if (!this.amount) { return console.error('ANGULAR-RAVE: Amount to charge is required'); }\r\n    if (!this.callback) { return console.error('ANGULAR-RAVE: You should attach to callback to verify your transaction'); }\r\n    return true;\r\n  }\r\n\r\n}\r\n","export class RaveOptions {\r\n  /**\r\n   * Your merchant public key provided when you create a button\r\n   */\r\n  PBFPubKey: string;\r\n  /**\r\n   * Email of the customer\r\n   */\r\n  customer_email?: string;\r\n  /**\r\n   * Firstname of the customer\r\n   */\r\n  customer_firstname?: string;\r\n  /**\r\n   * firstname of the customer\r\n   */\r\n  customer_lastname?: string;\r\n  /**\r\n   * Text to be displayed as a short modal description\r\n   */\r\n  custom_description?: string;\r\n  /**\r\n   * Link to your custom image\r\n   */\r\n  custom_logo?: string;\r\n  /**\r\n   * Text to be displayed as the title of the payment modal\r\n   */\r\n  custom_title?: string;\r\n  /**\r\n   * Amount to charge\r\n   */\r\n  amount: number;\r\n  /**\r\n   * phone number of the customer\r\n   */\r\n  customer_phone?: string;\r\n  /**\r\n   * URL to redirect to when transaction is completed.\r\n   */\r\n  redirect_url?: string;\r\n  /**\r\n   * route country. Default NG\r\n   */\r\n  country?: string;\r\n\r\n  payment_plan?: number;\r\n  /**\r\n   * currency to charge the card in. Default \"NGN\"\r\n   */\r\n  currency?: string;\r\n  /**\r\n   * This allows you select the payment option you want for your users, possible values are card, account or both\r\n   */\r\n  payment_method?: string;\r\n  /**\r\n   * Text to be displayed on the Rave Checkout Button\r\n   */\r\n  pay_button_text?: string;\r\n  /**\r\n   * Unique transaction reference provided by the merchant\r\n   */\r\n  txref: string;\r\n  /**\r\n   * This is a sha256 hash of your getpaidSetup values, it is used for passing secured values to the payment gateway\r\n   */\r\n  integrity_hash?: string;\r\n  /**\r\n   * The value to be passed for this is 1. This is useful when customer is using an opera browser, it\r\n   * would load the payment modal on a new page.\r\n   */\r\n  hosted_payment?: 1;\r\n  /**\r\n   * Any other custom data you wish to pass.\r\n   */\r\n  meta?: any;\r\n  /**\r\n   * Subaccounts to split payment with\r\n   * https://developer.flutterwave.com/v2.0/docs/split-payment\r\n   */\r\n  subaccount?: { id: string, transaction_split_ratio: string }[];\r\n}\r\n\r\nexport class PrivateRaveOptions extends RaveOptions {\r\n  /**\r\n   * A function to be called on successful card charge. Userâs can always be redirected to a successful or\r\n   * failed page supplied by the merchant here based on response\r\n   * @param response?: The server response\r\n   */\r\n  callback: (response?: any) => void;\r\n  /**\r\n   * A function to be called when the pay modal is closed.\r\n   */\r\n  onclose: () => void;\r\n  /**\r\n   * A function to be called when payment is about to begin\r\n   */\r\n  init: () => void;\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { AngularRaveComponent } from './angular-rave.component';\r\nimport { AngularRaveDirective } from './angular-rave.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [AngularRaveComponent, AngularRaveDirective],\r\n  declarations: [AngularRaveComponent, AngularRaveDirective],\r\n  providers: [],\r\n})\r\nexport class AngularRaveModule { }\r\n"]}